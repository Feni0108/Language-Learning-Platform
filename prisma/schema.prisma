generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Dictionary {
  id              Int      @id @default(autoincrement())
  original_word   String
  translated_word String
  image           Bytes?
  category        Category
}

model Sentence {
  id       Int
  sentence String
  language Language
  category Category

  @@unique([id, language])
}

model User {
  id             String                @id @default(cuid())
  name           String?
  password       String?
  username       String?               @unique
  email          String?               @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  actualProgress Int                   @default(0)
  sessions       Session[]
  lastGame       DateTime?
  leaderBoard    Leaderboard?
  isFirstLogin   Boolean               @default(true)
  userSettings   UserSettings?
  votes          VotesOnContribution[]
  progress       UserProgress[]
}

model UserSettings {
  id                Int       @id @default(autoincrement())
  interfaceLanguage Language?
  targetLanguage    Language?
  learningGoal      String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User?     @relation(fields: [userId], references: [id])
  userId            String    @unique
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Leaderboard {
  id          Int    @id @default(autoincrement())
  userId      String @unique
  totalPoints Int    @default(0)
  strike      Int    @default(0)
  user        User   @relation(fields: [userId], references: [id])
}

model Storyline {
  id        Int
  sentences Json
  options   Json
  solutions Json
  language  Language
  category  Category

  @@unique([id, language])
}

enum Category {
  GREETINGS
  FAMILY
  ANIMALS
  NUMBER
  CALENDAR
  FRIENDS
  HOBBY
  LIVING
  SHOPPING
}

model Words {
  id          Int
  word        String
  language    Language
  description String
  category    Category
  image       Bytes?

  @@unique([id, language])
}

enum Language {
  eng
  hu
  sk
  cz
  is
}

model Contribution {
  id          Int                   @id @default(autoincrement())
  word        String
  language    Language
  description String
  category    Category
  vote        Int                   @default(0)
  votes       VotesOnContribution[]

  @@unique([id, language])
}

model VotesOnContribution {
  contribution   Contribution @relation(fields: [contributionId], references: [id])
  contributionId Int
  user           User         @relation(fields: [userId], references: [id])
  userId         String

  @@id([contributionId, userId])
}

model UserProgress {
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  interfaceLanguage Language
  targetLanguage    Language
  progress          Int      @default(0)

  @@id([userId, interfaceLanguage, targetLanguage])
}
